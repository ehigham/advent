module Advent.DayN (main) where

import Control.Exception         (throw)
import Data.Text.IO              qualified as T
import Text.Parsec               (parse)
import Text.Parsec.Text          (Parser)
import Text.Printf               (printf)

import Advent.Share.ParsecUtils  (ParseException(..))

-- | Part 1
part1 :: a -> IO ()
part1 _ = printf "not implemented\n"


-- | Part 2
part2 :: a -> IO ()
part2 _ = printf "not implemented\n"


inputParser :: Parser [String]
inputParser = return []


main :: FilePath -> IO ()
main inputFile = do
    contents <- T.readFile inputFile
    rounds <- case parse inputParser inputFile contents of
      Left err -> throw (ParseException err)
      Right rounds  -> pure rounds
    putStr "Part 1: "  >> part1 rounds
    putStr "Part 2: "  >> part2 rounds
